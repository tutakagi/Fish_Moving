# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hgWs2mQOLf_ZJZMJF3s3y6vjB9y5fgqG
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Simulation Assumptions
# 1. Fish move randomly within the tank.
# 2. Markov property: The next position of a fish depends only on its current position, not on its past positions or movements.
# 3. The tank is a 10m x 10m x 10m cubic space.
# 4. All fish are released simultaneously from the highest point in the vertical direction (z=10, x=5, y=5).
# 5. Fish cannot move in a direction if they reach the tank's walls.
# 6. Fish avoid collisions with each other.
# 7. There are 10 fish in the tank.

# Simulation parameters
num_fish = 10
tank_size = 10
num_steps = 100
step_distance = 1
avoidance_distance = 0.2
center = np.array([tank_size / 2, tank_size / 2, tank_size])  # (x=5, y=5, z=10)

# Initial positions (released from the center)
positions = np.tile(center, (num_fish, 1))
velocities = np.random.uniform(-1, 1, (num_fish, 3))
velocities /= np.linalg.norm(velocities, axis=1)[:, np.newaxis]  # Normalize

# Function to update the positions of the fish
def update_positions(positions, velocities, tank_size, step_distance):
    new_positions = positions + velocities * step_distance

    # Reflect off the walls
    for i in range(num_fish):
        for j in range(3): # x, y, z directions
            if new_positions[i, j] < 0:
                new_positions[i, j] = 0
                velocities[i, j] *= -1
            elif new_positions[i, j] > tank_size:
                new_positions[i, j] = tank_size
                velocities[i, j] *= -1

    return new_positions

# Run the simulation
positions_list = [positions.copy()]

for step in range(num_steps):
    # Avoid collisions between fish
    for i in range(num_fish):
        for j in range(i + 1, num_fish):
            distance = np.linalg.norm(positions[i] - positions[j])
            if distance < avoidance_distance:
                velocities[i] = -velocities[i]
                velocities[j] = -velocities[j]

    positions = update_positions(positions, velocities, tank_size, step_distance)
    positions_list.append(positions.copy())

# 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
for i in range(num_fish):
    fish_positions = np.array([pos[i] for pos in positions_list])
    ax.plot(fish_positions[:, 0], fish_positions[:, 1], fish_positions[:, 2], label=f'Fish {i}')

ax.set_xlim([0, tank_size])
ax.set_ylim([0, tank_size])
ax.set_zlim([0, tank_size])
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.legend()
plt.show()